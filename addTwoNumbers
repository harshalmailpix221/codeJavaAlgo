/**
2. Add Two Numbers: Medium
You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        int carry = 0;
        ListNode l3 = new ListNode(0);
        ListNode ret = l3;
        while(l1!=null || l2!= null)
        {
            int cur = ((l1==null?0:l1.val) + (l2==null?0:l2.val)) + carry;
            carry = cur/10;
            l3.next = new ListNode(cur%10);
            
            l3 = l3.next;
            l1 = l1==null?null:l1.next; 
            l2 = l2==null?null:l2.next;
        }
        if(carry == 1)
        {
            l3.next = new ListNode(1); 
        }
        
        return ret.next;
    }
}
