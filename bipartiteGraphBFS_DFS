// "static void main" must be defined in a public class.
class Edge
{
    int src, dest;
    Edge(int source, int destination)
    {
        this.src = source;
        this.dest = destination;
    }
}

class Graph
{
    List<List<Integer>> adjList = new ArrayList<>();
    
    Graph(List<Edge> edges, int N)
    {
        for(int i=0; i<N; i++)
        {
            adjList.add(new ArrayList<>());
        }
        
        for(Edge e : edges)
        {
            adjList.get(e.src).add(e.dest);
            adjList.get(e.dest).add(e.src);
        }
    }
}

public class Main {
    
    private static boolean BFS(Graph g, int v, int N)
    {
        Queue<Integer> q = new LinkedList<>();
        int[] level = new int[N];
        boolean[] disc = new boolean[N];
        
        disc[v] = true;
        level[v]= 0;
        q.offer(v);
        
        while(!q.isEmpty())
        {
            v = q.poll();
            for(int u : g.adjList.get(v))
            {
                if(!disc[u])
                {
                    disc[u] = true;
                    level[u] = level[v]+1;
                    q.offer(u);
                }
                else if(level[u] == level[v]) return false;
            }
        }
        
        return true;
        
    }
    
    private static boolean BFSColoring(Graph g, int v, int N)
    {
        Queue<Integer> q = new LinkedList<>();
        boolean[] color = new boolean[N];
        boolean[] disc = new boolean[N];
        
        disc[v] = true;
        color[v]= true;
        q.offer(v);
        
        while(!q.isEmpty())
        {
            v = q.poll();
            for(int u : g.adjList.get(v))
            {
                if(!disc[u])
                {
                    disc[u] = true;
                    color[u] = !color[v];
                    q.offer(u);
                }
                else if(color[u] == color[v]) 
                {
                    System.out.println(Arrays.toString(color));
                    return false;
                }
            }
        }
        System.out.println(Arrays.toString(color));
        return true;
        
    }
    
    private static boolean DFS(Graph g, int v, int N)
    {
        boolean[] disc = new boolean[N];
        boolean[] color = new boolean[N];
        
        return dfsHelper(g,v,disc,color);
    }
    
    private static boolean dfsHelper(Graph g, int v, boolean[] disc, boolean[] color)
    {
        List<Integer> adjNodes = g.adjList.get(v);
        
        for(int u: adjNodes)
        {
            if(!disc[u])
            {
                disc[u] = true;
                color[u] = !color[v];
                if(!dfsHelper(g,u,disc,color)) return false;
            }
            else if(color[u] == color[v])
            {
                return false;
            }
        }
        return true;
    }
    
    public static void main(String[] args) {
        List<Edge> edges = Arrays.asList(
							new Edge(1, 2), new Edge(2, 3), new Edge(2, 8),
							new Edge(3, 4), new Edge(4, 6), new Edge(5, 7),
							new Edge(5, 9), new Edge(8, 9), new Edge(2, 4)
							// if we add 2->4 edge, graph is becomes non-Bipartite
						);
        int N =10;
        Graph G = new Graph(edges, N);
        // if(BFSColoring(G,1,N))
        if(BFS(G,1,N))
            System.out.println("Bipartite Graph");
        else
            System.out.println("Not a Bipartite Graph");
    }
}
