/**
300. Longest Increasing Subsequence: Medium

Given an unsorted array of integers, find the length of longest increasing subsequence.

Example:

Input: [10,9,2,5,3,7,101,18]
Output: 4 
Explanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4. 
Note:

There may be more than one LIS combination, it is only necessary for you to return the length.
Your algorithm should run in O(n2) complexity.
Follow up: Could you improve it to O(n log n) time complexity? Hint: Use Arrays.binarySearch(array, start, end, num) returns search index/(insertion index-1)
*/

class Solution {
    public int lengthOfLIS(int[] nums) {
        if(nums.length <= 1) return nums.length;
        int[] dp = new int[nums.length];
        
        Arrays.fill(dp,1);
        
        for(int i=1; i<nums.length; i++)
        {
            for(int j=0;j<i; j++)
            {
                if(nums[j] < nums[i]) // its increasing
                {
                    if(dp[j]+1 > dp[i])
                        dp[i] = dp[j]+1;
                }
            }
        }
        int max = 0;
        for(int i:dp)
        {
            max = Math.max(max,i);
        }
        
        return max;
    }
}
