/**
34. Find First and Last Position of Element in Sorted Array: Medium

Given an array of integers nums sorted in ascending order, find the starting and ending position of a given target value.

Your algorithm's runtime complexity must be in the order of O(log n).

If the target is not found in the array, return [-1, -1].
*/

class Solution {
    public int[] searchRange(int[] nums, int target) {
        int n = nums.length-1;
        int i=0, j=n;
        int[] res = new int[2];
        res[0] = -1; res[1] = -1;
        int mid = -1;
        while(i < j)
        {        
            if(mid == (i+j)/2) //for when mid will be the same as prev iterration.
            {
                if(nums[j] == target) 
                {
                    res[0] = j; res[1] = j;
                }
                break;
            }
            
            mid = (i+j) / 2;
            if(nums[mid] == target)
            {
                res[0] = mid; res[1] = mid;
                int k = mid-1;
                while(k>=0 && nums[k]==target)
                {
                  res[0]--; k--;
                }   
                k = mid+1;
                while(k<nums.length && nums[k]==target)
                {
                    res[1]++; k++;
                }
                break;
            }            
            else
            {
                if(nums[mid]>target) j = mid;
                if(nums[mid]<target) i = mid;
            }
            
        }
        
        if(i==j && nums[i] == target)  // when i==j
        {
            res[0] = i; res[1] = j;
        }
        return res;
    }
}


/**
public class Solution {
	public int[] searchRange(int[] A, int target) {
		int start = Solution.firstGreaterEqual(A, target);
		if (start == A.length || A[start] != target) {
			return new int[]{-1, -1};
		}
		return new int[]{start, Solution.firstGreaterEqual(A, target + 1) - 1};
	}

	//find the first number that is greater than or equal to target.
	//could return A.length if target is greater than A[A.length-1].
	//actually this is the same as lower_bound in C++ STL.
	private static int firstGreaterEqual(int[] A, int target) {
		int low = 0, high = A.length;
		while (low < high) {
			int mid = (low + high)/2;
			//low <= mid < high
			if (A[mid] < target) {
				low = mid + 1;
			} else {
				//should not be mid-1 when A[mid]==target.
				//could be mid even if A[mid]>target because mid<high.
				high = mid;
			}
		}
		return low;
	}
}
*/
