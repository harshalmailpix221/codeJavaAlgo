/**
Partition Equal Subset Sum
Given a non-empty array containing only positive integers, find if the array can be partitioned into two subsets such that the sum of elements in both subsets is equal.
Ex 1:
Input: [1, 5, 11, 5]
Output: true
Explanation: The array can be partitioned as [1, 5, 5] and [11].
Ex 2: 
Input: [1, 2, 3, 5]
Output: false
Explanation: The array cannot be partitioned into equal sum subsets.
*/   

class Solution {
    public boolean canPartition(int[] nums) {
        int sum = 0;
        for(int n:nums)
        {
            sum+=n;
        }
        if(sum%2!=0) return false;
        
        //Working solution but too much time complexity. Stops working after 24 elements in input array
        /**
        List<Integer> dp = new ArrayList<>();
        dp.add(nums[0]);
        int k=1;
        for(int j=1;j<nums.length;j++)
        {
            int size = dp.size();
            for(int i=0;i<size; i++)
            {
                dp.add(dp.get(i)+nums[j]);
            }
        }
        if(dp.contains(sum/2)) return true;
        return false;
        */
        
    // exceeds time limit after around 125 elements
    /**    
        return helper(nums, 0, 0 , sum/2);
    }
    
    private boolean helper(int[] nums, int curSum, int index, int sum)
    {
        if(curSum > sum || index >= nums.length) return false;
        if(curSum==sum) return true;
        return helper(nums, curSum+nums[index], index+1,sum) || helper(nums, curSum, index+1, sum);
    }
    */
/**
      1,5,11,5 => sum = 22
          sum/2 = 11
    i,j 0 1 2 3 4 5 6 7 8 9 10 11
      0 t f f f f f f f f f f  f
  (1) 1 t t f f f f f f f f f  f   
  (5) 2 t t f f f t t f f f f  f
 (11) 3 t t f f f t t f f f f  t
  (5) 4 t t f f f t t f f f t  t
      dp(i-1,j) => item above; dp(i-1.j-nums[i]) => some element in the row above which if summed up with nums[i] is <= sum.
*/
        
        boolean[][] dp = new boolean[nums.length+1][(sum/2)+1];
        dp[0][0] = true;
        for(int i=1; i<=nums.length; i++)
        {
            for(int j=0;j<=sum/2; j++)
            {
                if(j-nums[i-1] >=0)
                    dp[i][j] = dp[i-1][j-nums[i-1]] || dp[i-1][j];
                else
                    dp[i][j] = dp[i-1][j];
            }
        }
        
        return dp[nums.length][sum/2];
        
        //This can be further optimized. We use only current (i-th) row and the one before ((i-1)th). So we can use 2 1D arrays instead of dp[][].
    }
}
