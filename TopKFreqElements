/**
Given a non-empty array of integers, return the k most frequent elements.

Example 1:

Input: nums = [1,1,1,2,2,3], k = 2
Output: [1,2]
Example 2:

Input: nums = [1], k = 1
Output: [1]
*/

class Solution {
    public int[] topKFrequent(int[] nums, int k) {
        HashMap<Integer, Integer> map = new HashMap<>();
        
        for(int n:nums)
        {
            map.put(n,map.getOrDefault(n,0)+1);
        }
        
        PriorityQueue<Map.Entry<Integer,Integer>> pq = new PriorityQueue<>((o1,o2)->o2.getValue()-o1.getValue());
        for(Map.Entry e:map.entrySet())
        {
            pq.offer(e);
        }
        int[] res = new int[k];
        for(int i=0;i<k;i++)
            res[i] = pq.poll().getKey();
        return res;
    }
}
