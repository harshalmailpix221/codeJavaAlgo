/**
56. Merge Intervals : Medium
Given a collection of intervals, merge all overlapping intervals.

Example 1:

Input: intervals = [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlaps, merge them into [1,6].
Example 2:

Input: intervals = [[1,4],[4,5]]
Output: [[1,5]]
Explanation: Intervals [1,4] and [4,5] are considered overlapping.
NOTE: input types have been changed on April 15, 2019. Please reset to default code definition to get new method signature.

 

Constraints:

intervals[i][0] <= intervals[i][1]

*/

class Solution {
    public int[][] merge(int[][] intrls) {
        if(intrls == null || intrls.length <= 1) return intrls;
        
        PriorityQueue<int[]> intervals = new PriorityQueue<>((a,b)->a[0]-b[0]);
        for(int[] i : intrls)
        {
            intervals.add(i);
        }
        
        List<int[]> res= new ArrayList<>();
        int cur = 0;
        int[] temp = intervals.poll();
        res.add(temp);
        while(!intervals.isEmpty())
        {
            int[] curInt = intervals.poll();
            if(temp[1] >= curInt[0])
            {
                res.get(cur)[1] = temp[1]>curInt[1]?temp[1]:curInt[1];
            }
            else
            {
                res.add(curInt);
                cur++;
            }
            temp = res.get(cur);
        }
        int[][] result = new int[res.size()][2];
        for(int i=0; i<res.size(); i++)
            result[i] = res.get(i);
        return result;
    }
}

/*
class Solution {
    public int[][] merge(int[][] intervals) {
        if(intervals.length == 0 || intervals == null || intervals[0].length == 0) return new int[0][];
        Arrays.sort(intervals, (o1,o2)-> o1[0]-o2[0] );
        List<int[]> res = new ArrayList<>();
        res.add(intervals[0]);
        int j=0;
        for(int i = 1; i < intervals.length; i++)
        {
            if(res.get(j)[1] >= intervals[i][0])
            {
                res.get(j)[1] = Math.max(intervals[i][1],res.get(j)[1]);
            }
            else
            {
                res.add(intervals[i]);
                j++;
            }   
        }
        
        int[][] result = new int[res.size()][2];
        for(int i=0; i<res.size(); i++)
            result[i] = res.get(i);
        return result;
    }
}
*/
